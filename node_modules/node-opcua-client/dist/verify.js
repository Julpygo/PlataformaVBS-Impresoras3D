"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._verifyCertificate = void 0;
const chalk = require("chalk");
const node_opcua_crypto_1 = require("node-opcua-crypto");
const node_opcua_debug_1 = require("node-opcua-debug");
const doDebug = node_opcua_debug_1.checkDebugFlag(__filename);
const debugLog = node_opcua_debug_1.make_debugLog(__filename);
const errorLog = node_opcua_debug_1.make_errorLog(__filename);
const warningLog = node_opcua_debug_1.make_warningLog(__filename);
function _verifyCertificate(serverOrClient, certificateManager, applicationUri) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function* () {
        // verify that certificate is matching private key, and inform the developper if not
        const certificate = this.getCertificate();
        const privateKey = node_opcua_crypto_1.convertPEMtoDER(this.getPrivateKey());
        //
        if (!node_opcua_crypto_1.publicKeyAndPrivateKeyMatches(certificate, privateKey)) {
            errorLog(chalk.bgWhite.red("[NODE-OPCUA-E010] Configuration error : the certificate and the private key do not match !"));
            errorLog(chalk.bgWhite.red("                  please check the configuration of the OPCUA Server"));
            errorLog(chalk.bgWhite.red("                  privateKey= ", this.privateKeyFile));
            errorLog(chalk.bgWhite.red(" cerficateManager.privateKey= ", certificateManager.privateKey));
            errorLog(chalk.bgWhite.red("                  certificateFile= ", this.certificateFile));
            throw new Error("Configuration error : the certificate and the private key do not match ! please fix your configuration");
        }
        // verify that the certificate provided has the right key length ( at least 2048)
        const privateKeyInfo = node_opcua_crypto_1.explorePrivateKey(privateKey);
        if (privateKeyInfo.modulus.length <= 1024 / 8) {
            warningLog(chalk.yellowBright(`[NODE-OPCUA-W04] The public/private key pair uses a key length which is equal or lower than 1024 bits. 
                 OPCUA version 1.04 requires that security key length are greater or equal to 2048 bits.  
                 The ${serverOrClient} is operating at risk.                                             `));
        }
        // verify that the certificate has a valid date and has expected extensions fields such as DNS and IP.
        const status1 = yield certificateManager.trustCertificate(certificate);
        const status = yield certificateManager.verifyCertificateAsync(certificate);
        if (status !== "Good") {
            warningLog(chalk.yellowBright("[NODE-OPCUA-W04] Warning: the certificate status is = "), status, " file = ", this.certificateFile);
        }
        const certificateInfo = node_opcua_crypto_1.exploreCertificate(certificate);
        const now = new Date();
        // check that certificate is active
        if (certificateInfo.tbsCertificate.validity.notBefore.getTime() > now.getTime()) {
            // certificate is not active yet
            warningLog(chalk.yellowBright(`[NODE-OPCUA-W02] The certificate is not active yet
                 notBefore       ${certificateInfo.tbsCertificate.validity.notBefore.toISOString()}
                 certificateFile ${this.certificateFile}
`));
        }
        //  check that certificate has not expired
        if (certificateInfo.tbsCertificate.validity.notAfter.getTime() <= now.getTime()) {
            // certificate is obsolete
            warningLog(chalk.yellowBright(`[NODE-OPCUA-W03] The certificate has expired
                 Please regenerate a valid certificate
                 notAfter       = ${certificateInfo.tbsCertificate.validity.notAfter.toISOString()}
                 certificateFile= ${this.certificateFile} `));
        }
        else {
            const tenDays = 10 * 24 * 60 * 60 * 1000;
            if (certificateInfo.tbsCertificate.validity.notAfter.getTime() <= now.getTime() + tenDays) {
                // certificate is going to expired very soon
                warningLog(chalk.yellowBright(`[NODE-OPCUA-W05] The certificate is about to expire in less than 10 days
                 Please regenerate a valid certificate as soon as possible
                 notAfter       = ${certificateInfo.tbsCertificate.validity.notAfter.toISOString()}
                 certificateFile= ${this.certificateFile}`));
            }
        }
        // check that server certificate matches Application URI
        if (((_c = (_b = (_a = certificateInfo === null || certificateInfo === void 0 ? void 0 : certificateInfo.tbsCertificate) === null || _a === void 0 ? void 0 : _a.extensions) === null || _b === void 0 ? void 0 : _b.subjectAltName) === null || _c === void 0 ? void 0 : _c.uniformResourceIdentifier[0]) !== applicationUri) {
            warningLog(chalk.yellowBright(`[NODE-OPCUA-W06] The certificate subjectAltName does not match the server applicationUri
                 Please regenerate a specific certificate that matches your server applicationUri
                 certificate subjectAltName  = ${(_e = (_d = certificateInfo.tbsCertificate.extensions) === null || _d === void 0 ? void 0 : _d.subjectAltName) === null || _e === void 0 ? void 0 : _e.uniformResourceIdentifier[0]}
                 applicationUri  = ${applicationUri}
                 certificateFile = ${this.certificateFile}`));
        }
    });
}
exports._verifyCertificate = _verifyCertificate;
//# sourceMappingURL=verify.js.map